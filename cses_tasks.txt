/*NORMAL CODE*/

#include<bits/stdc++.h>
using namespace std;
#define int long long
#define pb push_back
#define rep(i,n,m) for(int i=n;i<m;i++)
#define ld long double
#define pi pair<int,int>
#define pld pair<ld,ld>
#define f first
#define s second
mt19937_64 rnd((int) chrono::steady_clock::now().time_since_epoch().count());
const double PI=acos(-1);
const int nax=1e6+10,mod=1e9+7,inf=1e18;//998244353
/*
*/
void solve()
{
	
	cout<<'\n';
}
int32_t main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	#ifndef ONLINE_JUDGE
	freopen("input.in", "r", stdin);
    freopen("output.in", "w", stdout);
	#endif
	int tt=1;
	cin>>tt;
	for(int i=1;i<=tt;i++)
	{
		//cout<<"Case #"<<i<<": ";
		solve();
	}
	return 0;
}
/* stuff you should look for
    * int overflow, array bounds
    * special cases (n=1?)
    * do smth instead of nothing and stay organized
    * WRITE STUFF DOWN
*/

/*COMBINATRONICS CODE*/
#include<bits/stdc++.h>
using namespace std;
#define int long long
#define pb push_back
#define rep(i,n,m) for(int i=n;i<m;i++)
#define ld long double
#define pi pair<int,int>
#define pld pair<ld,ld>
#define f first
#define s second
const double PI=acos(-1);
const int nax=2500+10,mod=998244353,inf=1e18;//1e9+7
int f[nax],invf[nax];
int mul(int x,int y)
{
    return x*y%mod;
}
int expo(int a,int b)
{
    int res=1;
    while(b)
    {
        if(b&1)
            res=mul(res,a);
        a=mul(a,a);
        b>>=1;
    }
    return res;
}
int inv(int x)
{
    return expo(x,mod-2);
}
int inv(int a,int b)
{
    return expo(a,b-2);
}
int nck(int n,int r)
{
    if(r<0 or r>n)
        return 0;
    return mul(f[n],mul(invf[n-r],invf[r]));
}
int sub(int x,int y)
{
    x-=y;
    if(x<0)
        x+=mod;
    return x;
}
int add(int x,int y)
{
    x+=y;
    if(x>=mod)
        x-=mod;
    return x;
}
void solve()
{
    
    cout<<endl;
}
int32_t main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(nullptr);
    cout.tie(nullptr);
    #ifndef ONLINE_JUDGE
    freopen("input.in", "r", stdin);
    freopen("output.in", "w", stdout);
    #endif
    f[0]=1;
    for(int i=1;i<nax;i++)
        f[i]=mul(f[i-1],i);
    invf[nax-1]=inv(f[nax-1]);
    for(int i=nax-1;i;i--)
        invf[i-1]=mul(invf[i],i);
    int tt=1;
    //cin>>tt;
    for(int i=1;i<=tt;i++)
    {
        //cout<<"Case #"<<i<<": ";
        solve();
    }
    return 0;
}